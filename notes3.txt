🔐 Access Token
-What it is: A short-lived token (e.g. 15 mins to 1 hour) given to a user after they log in successfully.
-Purpose: Used to authenticate the user when they access protected resources (like APIs).
-How it works:
    You log in (e.g. enter username/password).
    The server verifies you and gives you an access token.
    You send this token with each request to prove you're logged in.
    When it expires, you can’t use it anymore.

🔁 Refresh Token
-What it is: A long-lived token (e.g. days or weeks) also given at login.
-Purpose: Used to get a new access token without logging in again.
-How it works:
    Along with your access token, you also get a refresh token.
    When the access token expires, you send the refresh token to get a new access token.
    This way, you stay logged in without re-entering your password.



////controllers/user.controller.js
const generateAccessAndRefreshTokens = async(userId)=>{
  try{
      const user = await User.findById(userId);
      if(!user){
          throw new ApiError(404, 'User not found');
      }
      const accessToken = user.generateAccessToken();
      const refreshToken = user.generateRefreshToken();

      // Save refresh token in user document
      user.refreshToken = refreshToken;
      await user.save({validateBeforeSave: false});

      return {accessToken, refreshToken};
  }catch(error){
      console.error('Error generating tokens:', error);
      throw new ApiError(500, 'Something went wrong while generating tokens');
  }
}

const loginUser = asyncHandler(async (req, res, next) => {}
    //logic
){}


//log out
Properly log the user out by:
-Clearing the cookies (which may contain the access or refresh token).
-Deleting or invalidating the refresh token from the database (server-side).
Problem:
-To clear the refresh token from the database, we usually need to identify which user is logging out.
-But in the logout route:We don’t have access to the user ID or user info unless it's extracted from the token.
Solution: Use Middleware Before Logout Handler
-Middleware does:
-Extract and verify the refresh token from the request (usually from cookies or headers).
-Decode the token and get the user ID or email from its payload.
-Attach the user info to req.user (or similar).
-Pass control to the logoutUser function.
-This way, logoutUser can access req.user and:
-Delete the correct refresh token from DB.
-Clear cookie from the response.
const logoutUser = asyncHandler(async (req, res) => {}
    //logic
){}
-auth.Middleware.js


