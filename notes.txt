A programming language: java,js,php,golang,c++(one framework)
a database: mongo,mysql,postgres,sqlite(orm,odm)

=========
a js based backend (data,file,third party api)
a js runtime: nodejs/deno/bun

//<directory struture>
package.json
.env
-> src
index(db connects)
app (config cookie,urlencode)
constants(enums,db-name)
->db
->models (data struture and schema)
->controllers (functionaity) (methods functions)
->middlerware 
->routes
->utils
->more(Depends)


=====
computer----->(express)<------server
//express
-listen
-get request


//letsGo
-https://expressjs.com/
-npm init
-npm install express
=env
-dotenv: https://www.npmjs.com/package/dotenv
-npm install dotenv --save
-require('dotenv').config()
-process.env.PORT


=====================================
//fullstack_basic
->backend
-npm init -y
-npm i express 
-file server.js
-"type":"module" for import express from 'express';
-use json formatter to view json text
-npm install cors  var cors = require('cors')  app.use(cors())

->frontend
-npm create vite@latest .
-npm install
-npm run dev
-npm install axios


->has been blocked by CORS policy
-cross origin
-url and port both should be same
-solution:  make url and port whitelist & backend may cors (backend resolution)
-(ghar k ander sabko allow mat kro)
-proxy (frontend resolution)


->Proxies (need only /api to mention not whole)
for vite only
vite.config.js
export default defineConfig({
  server: {
    proxy: {
      '/api':  'http://localhost:3000', // Adjust the port to match your backend server
    }
  },
  plugins: [react()],
})


->npm run build (dist)


=======================================
DATA MODELLING

kya store krna hai???
-mongoose (https://mongoosejs.com/) helper (prisma is also of it)
-data modelling tool 
  1. (https://www.datensen.com/moon-modeler-for-databases.html) (expensive) (auto code generate of mongo) (database diagram)
  2. (https://www.eraser.io/) (syntax is quite different)
  3. pen paper best lol (free)
eg: register (username,email,password,photo,button)

-
codesandbox
github codespace
stackbiltz
-

-npm init -y
-npm install mongoose
-models
    import mongoose from 'mongoose';
    const userSchema=new mongoose.Schema({},{timestamps: true}); 
    export const User=mongoose.model('User',userSchema); //kya model and kispar
-when database may store hoga its gets converted to pural (users)


==========================================


project_youtube
-npm init
-gitignore generator (https://mrkandreev.name/snippets/gitignore-generator/#Node)
-public, src(app,content,index), .env,
-nodemon (npm install -g nodemon)  (npm i -D nodemon) ("dev":"nodemon src/index.js")
src/
->db
->models (data struture and schema)
->controllers (functionaity) (methods functions)
->middlerware 
->routes
->utils
-npm i prettier (.prettierrc .prettierignore)



DATABASE 
-mongodb atlas (login)
-create new project 
-create (choose free)
-username: akpadia02
password: akpadia 
-.env (mongodb uri)
-npm i mongoose express dotenv
connect?
        (async ()=>{
        try{
            await mongoose.connect(`${process.env.MONGODB_URI}/${DB_NAME}`)
            app.on("error",()=>{
                console.log("Error",error);
                throw error;
            })
            app.listen(process.env.PORT,()=>{
                console.log(`Server is running on port ${process.env.PORT}`);
            });
        }catch(error){
            console.error('Error connecting to MongoDB:', error);
        }
    })()






=============================
server connect

//express
->request
->response


cookie-parser (npm i cookie-parser) app.use(cookieParser()); // Needed to parse cookies from incoming requests, allowing access to cookie data in req.cookies
cors


MIDDLEWARE 
-Middleware is a function that gets access to the request (req) and response (res) objects, and either: (err,req,res,next)
-passes control to the next middleware or route using next(), or
-terminates the request-response cycle (e.g., by sending a response or throwing an error).
    -eg: /instagram:
    This is the route path the client is hitting (e.g., GET /instagram).

    Middle Block (empty square):
    This represents the middleware function, which runs before the final response is sent.
    ➤ In this case, it’s checking: "Is the user logged in?"

    Right Block ((req, res) => res.send("hitesh")):
    This is the final route handler that sends the response ("hitesh") to the client if everything passes.

UTILS
-async handler
-Error nodejs (https://nodejs.org/api/errors.html)